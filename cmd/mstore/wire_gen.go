// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/realotz/mstore/internal/biz"
	"github.com/realotz/mstore/internal/biz/storage"
	"github.com/realotz/mstore/internal/conf"
	"github.com/realotz/mstore/internal/data"
	"github.com/realotz/mstore/internal/server"
	"github.com/realotz/mstore/internal/service"
	storage2 "github.com/realotz/mstore/internal/service/storage"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData)
	authRepo := data.NewAuthRepo(dataData)
	authUseCase, err := biz.NewAuthUseCase(confData, userRepo, authRepo)
	if err != nil {
		return nil, nil, err
	}
	authServiceServer := service.NewAuthService(authUseCase)
	userUseCase := biz.NewUserUseCase(userRepo)
	userServiceServer := service.NewUserService(userUseCase)
	volumeRepo := data.NewVolumeRepo(dataData)
	volumeManager, err := storage.NewVolumeManager(volumeRepo)
	if err != nil {
		return nil, nil, err
	}
	storageUseCase := storage.NewStorageUseCase(volumeManager)
	volumeService := storage2.NewVolumeService(storageUseCase)
	grpcServer := server.NewGRPCServer(confServer, logger, authUseCase, authServiceServer, userServiceServer, volumeService)
	httpServer := server.NewHTTPServer(confServer, logger, authUseCase, authServiceServer, userServiceServer, volumeService)
	cronService := service.NewCronService()
	cronManager := server.NewCronServer(confData, cronService)
	app := newApp(logger, grpcServer, httpServer, cronManager)
	return app, func() {
	}, nil
}
