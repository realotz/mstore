// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package userV1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "github.com/realotz/mstore/api/core/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AuthServiceHTTPServer interface {
	Captcha(context.Context, *CaptchaReq) (*CaptchaReply, error)
	Login(context.Context, *LoginReq) (*LoginToken, error)
	NewPasswd(context.Context, *NewPasswdReq) (*v1.Empty, error)
	RefreshToken(context.Context, *v1.Empty) (*LoginToken, error)
}

func RegisterAuthServiceHTTPServer(s *http.Server, srv AuthServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/auth/captcha", _AuthService_Captcha0_HTTP_Handler(srv))
	r.POST("/api/v1/auth", _AuthService_Login0_HTTP_Handler(srv))
	r.POST("/api/v1/auth/refresh", _AuthService_RefreshToken0_HTTP_Handler(srv))
	r.PUT("/api/v1/auth/passwd", _AuthService_NewPasswd0_HTTP_Handler(srv))
}

func _AuthService_Captcha0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CaptchaReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.service.users.v1.AuthService/Captcha")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Captcha(ctx, req.(*CaptchaReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CaptchaReply)
		return ctx.Result(200, reply)
	}
}

func _AuthService_Login0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.service.users.v1.AuthService/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginToken)
		return ctx.Result(200, reply)
	}
}

func _AuthService_RefreshToken0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.service.users.v1.AuthService/RefreshToken")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RefreshToken(ctx, req.(*v1.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginToken)
		return ctx.Result(200, reply)
	}
}

func _AuthService_NewPasswd0_HTTP_Handler(srv AuthServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in NewPasswdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.service.users.v1.AuthService/NewPasswd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.NewPasswd(ctx, req.(*NewPasswdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.Empty)
		return ctx.Result(200, reply)
	}
}

type AuthServiceHTTPClient interface {
	Captcha(ctx context.Context, req *CaptchaReq, opts ...http.CallOption) (rsp *CaptchaReply, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginToken, err error)
	NewPasswd(ctx context.Context, req *NewPasswdReq, opts ...http.CallOption) (rsp *v1.Empty, err error)
	RefreshToken(ctx context.Context, req *v1.Empty, opts ...http.CallOption) (rsp *LoginToken, err error)
}

type AuthServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthServiceHTTPClient(client *http.Client) AuthServiceHTTPClient {
	return &AuthServiceHTTPClientImpl{client}
}

func (c *AuthServiceHTTPClientImpl) Captcha(ctx context.Context, in *CaptchaReq, opts ...http.CallOption) (*CaptchaReply, error) {
	var out CaptchaReply
	pattern := "/api/v1/auth/captcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.service.users.v1.AuthService/Captcha"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthServiceHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginToken, error) {
	var out LoginToken
	pattern := "/api/v1/auth"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.service.users.v1.AuthService/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthServiceHTTPClientImpl) NewPasswd(ctx context.Context, in *NewPasswdReq, opts ...http.CallOption) (*v1.Empty, error) {
	var out v1.Empty
	pattern := "/api/v1/auth/passwd"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.service.users.v1.AuthService/NewPasswd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthServiceHTTPClientImpl) RefreshToken(ctx context.Context, in *v1.Empty, opts ...http.CallOption) (*LoginToken, error) {
	var out LoginToken
	pattern := "/api/v1/auth/refresh"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.service.users.v1.AuthService/RefreshToken"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
