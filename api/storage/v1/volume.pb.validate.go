// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/storage/v1/volume.proto

package storageV1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on FileReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FileReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Path

	return nil
}

// FileReqValidationError is the validation error returned by FileReq.Validate
// if the designated constraints aren't met.
type FileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileReqValidationError) ErrorName() string { return "FileReqValidationError" }

// Error satisfies the builtin error interface
func (e FileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileReqValidationError{}

// Validate checks the field values on RenameFileReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RenameFileReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Path

	// no validation rules for NewPath

	// no validation rules for IsCover

	return nil
}

// RenameFileReqValidationError is the validation error returned by
// RenameFileReq.Validate if the designated constraints aren't met.
type RenameFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameFileReqValidationError) ErrorName() string { return "RenameFileReqValidationError" }

// Error satisfies the builtin error interface
func (e RenameFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameFileReqValidationError{}

// Validate checks the field values on MoveCopyFileReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MoveCopyFileReq) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MoveCopyFileReqValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsDelete

	// no validation rules for IsCover

	// no validation rules for ToPath

	// no validation rules for ToVolumeId

	return nil
}

// MoveCopyFileReqValidationError is the validation error returned by
// MoveCopyFileReq.Validate if the designated constraints aren't met.
type MoveCopyFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveCopyFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveCopyFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveCopyFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveCopyFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveCopyFileReqValidationError) ErrorName() string { return "MoveCopyFileReqValidationError" }

// Error satisfies the builtin error interface
func (e MoveCopyFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveCopyFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveCopyFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveCopyFileReqValidationError{}

// Validate checks the field values on DelFileReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DelFileReq) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DelFileReqValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DelFileReqValidationError is the validation error returned by
// DelFileReq.Validate if the designated constraints aren't met.
type DelFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelFileReqValidationError) ErrorName() string { return "DelFileReqValidationError" }

// Error satisfies the builtin error interface
func (e DelFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelFileReqValidationError{}

// Validate checks the field values on ListFileReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListFileReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Path

	// no validation rules for Type

	if v, ok := interface{}(m.GetOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFileReqValidationError{
				field:  "Option",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListFileReqValidationError is the validation error returned by
// ListFileReq.Validate if the designated constraints aren't met.
type ListFileReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileReqValidationError) ErrorName() string { return "ListFileReqValidationError" }

// Error satisfies the builtin error interface
func (e ListFileReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileReqValidationError{}

// Validate checks the field values on ListFileReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListFileReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFileReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	return nil
}

// ListFileReplyValidationError is the validation error returned by
// ListFileReply.Validate if the designated constraints aren't met.
type ListFileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFileReplyValidationError) ErrorName() string { return "ListFileReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListFileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFileReplyValidationError{}

// Validate checks the field values on File with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *File) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Size

	// no validation rules for Path

	// no validation rules for Ext

	// no validation rules for IsDir

	// no validation rules for UpdatedAt

	// no validation rules for VolumeId

	return nil
}

// FileValidationError is the validation error returned by File.Validate if the
// designated constraints aren't met.
type FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileValidationError) ErrorName() string { return "FileValidationError" }

// Error satisfies the builtin error interface
func (e FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileValidationError{}

// Validate checks the field values on ListVolumeReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListVolumeReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListVolumeReqValidationError is the validation error returned by
// ListVolumeReq.Validate if the designated constraints aren't met.
type ListVolumeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVolumeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVolumeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVolumeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVolumeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVolumeReqValidationError) ErrorName() string { return "ListVolumeReqValidationError" }

// Error satisfies the builtin error interface
func (e ListVolumeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVolumeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVolumeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVolumeReqValidationError{}

// Validate checks the field values on ListVolumeReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListVolumeReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVolumeReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	return nil
}

// ListVolumeReplyValidationError is the validation error returned by
// ListVolumeReply.Validate if the designated constraints aren't met.
type ListVolumeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVolumeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVolumeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVolumeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVolumeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVolumeReplyValidationError) ErrorName() string { return "ListVolumeReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListVolumeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVolumeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVolumeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVolumeReplyValidationError{}

// Validate checks the field values on DeleteVolumeReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteVolumeReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteVolumeReqValidationError is the validation error returned by
// DeleteVolumeReq.Validate if the designated constraints aren't met.
type DeleteVolumeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVolumeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVolumeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVolumeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVolumeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVolumeReqValidationError) ErrorName() string { return "DeleteVolumeReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteVolumeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVolumeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVolumeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVolumeReqValidationError{}

// Validate checks the field values on CreateVolumeReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateVolumeReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Provider

	// no validation rules for ProviderConfig

	return nil
}

// CreateVolumeReqValidationError is the validation error returned by
// CreateVolumeReq.Validate if the designated constraints aren't met.
type CreateVolumeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVolumeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVolumeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVolumeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVolumeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVolumeReqValidationError) ErrorName() string { return "CreateVolumeReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateVolumeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVolumeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVolumeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVolumeReqValidationError{}

// Validate checks the field values on Volume with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Volume) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Provider

	// no validation rules for ProviderConfig

	// no validation rules for Id

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VolumeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VolumeValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VolumeValidationError is the validation error returned by Volume.Validate if
// the designated constraints aren't met.
type VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeValidationError) ErrorName() string { return "VolumeValidationError" }

// Error satisfies the builtin error interface
func (e VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeValidationError{}
