// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/storage/v1/volume.proto

package storageV1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListVolumeReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListVolumeReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListVolumeReqValidationError is the validation error returned by
// ListVolumeReq.Validate if the designated constraints aren't met.
type ListVolumeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVolumeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVolumeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVolumeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVolumeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVolumeReqValidationError) ErrorName() string { return "ListVolumeReqValidationError" }

// Error satisfies the builtin error interface
func (e ListVolumeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVolumeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVolumeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVolumeReqValidationError{}

// Validate checks the field values on ListVolumeReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListVolumeReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVolumeReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	return nil
}

// ListVolumeReplyValidationError is the validation error returned by
// ListVolumeReply.Validate if the designated constraints aren't met.
type ListVolumeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVolumeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVolumeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVolumeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVolumeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVolumeReplyValidationError) ErrorName() string { return "ListVolumeReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListVolumeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVolumeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVolumeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVolumeReplyValidationError{}

// Validate checks the field values on DeleteVolumeReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteVolumeReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteVolumeReqValidationError is the validation error returned by
// DeleteVolumeReq.Validate if the designated constraints aren't met.
type DeleteVolumeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVolumeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVolumeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVolumeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVolumeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVolumeReqValidationError) ErrorName() string { return "DeleteVolumeReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteVolumeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVolumeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVolumeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVolumeReqValidationError{}

// Validate checks the field values on CreateVolumeReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateVolumeReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Provider

	// no validation rules for ProviderConfig

	return nil
}

// CreateVolumeReqValidationError is the validation error returned by
// CreateVolumeReq.Validate if the designated constraints aren't met.
type CreateVolumeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVolumeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVolumeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVolumeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVolumeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVolumeReqValidationError) ErrorName() string { return "CreateVolumeReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateVolumeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVolumeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVolumeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVolumeReqValidationError{}

// Validate checks the field values on Volume with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Volume) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Provider

	// no validation rules for ProviderConfig

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VolumeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VolumeValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VolumeValidationError is the validation error returned by Volume.Validate if
// the designated constraints aren't met.
type VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeValidationError) ErrorName() string { return "VolumeValidationError" }

// Error satisfies the builtin error interface
func (e VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeValidationError{}
