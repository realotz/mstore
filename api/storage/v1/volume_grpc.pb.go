// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package storageV1

import (
	context "context"
	v1 "github.com/realotz/mstore/api/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VolumeServiceClient is the client API for VolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VolumeServiceClient interface {
	// 创建存储卷
	CreateVolume(ctx context.Context, in *CreateVolumeReq, opts ...grpc.CallOption) (*Volume, error)
	// 删除存储卷
	DeleteVolume(ctx context.Context, in *DeleteVolumeReq, opts ...grpc.CallOption) (*v1.Empty, error)
	// 存储卷列表
	ListVolume(ctx context.Context, in *ListVolumeReq, opts ...grpc.CallOption) (*ListVolumeReply, error)
	// 文件列表
	ListFile(ctx context.Context, in *ListFileReq, opts ...grpc.CallOption) (*ListFileReply, error)
	// 创建文件
	CreateFile(ctx context.Context, in *CreateFileReq, opts ...grpc.CallOption) (*v1.Empty, error)
	// 文件删除
	DelFile(ctx context.Context, in *DelFileReq, opts ...grpc.CallOption) (*v1.Empty, error)
	// 移动与复制文件
	MoveAndCopyFile(ctx context.Context, in *MoveCopyFileReq, opts ...grpc.CallOption) (*v1.Empty, error)
	// 重命名文件
	RenameFile(ctx context.Context, in *RenameFileReq, opts ...grpc.CallOption) (*v1.Empty, error)
	// 获取文件下载地址
	FileDown(ctx context.Context, in *FileReq, opts ...grpc.CallOption) (*FileDownRes, error)
	// 获取文件下载地址
	FileData(ctx context.Context, in *FileReq, opts ...grpc.CallOption) (*FileDataRes, error)
}

type volumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVolumeServiceClient(cc grpc.ClientConnInterface) VolumeServiceClient {
	return &volumeServiceClient{cc}
}

func (c *volumeServiceClient) CreateVolume(ctx context.Context, in *CreateVolumeReq, opts ...grpc.CallOption) (*Volume, error) {
	out := new(Volume)
	err := c.cc.Invoke(ctx, "/api.service.storage.v1.volume.VolumeService/CreateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) DeleteVolume(ctx context.Context, in *DeleteVolumeReq, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/api.service.storage.v1.volume.VolumeService/DeleteVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) ListVolume(ctx context.Context, in *ListVolumeReq, opts ...grpc.CallOption) (*ListVolumeReply, error) {
	out := new(ListVolumeReply)
	err := c.cc.Invoke(ctx, "/api.service.storage.v1.volume.VolumeService/ListVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) ListFile(ctx context.Context, in *ListFileReq, opts ...grpc.CallOption) (*ListFileReply, error) {
	out := new(ListFileReply)
	err := c.cc.Invoke(ctx, "/api.service.storage.v1.volume.VolumeService/ListFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) CreateFile(ctx context.Context, in *CreateFileReq, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/api.service.storage.v1.volume.VolumeService/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) DelFile(ctx context.Context, in *DelFileReq, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/api.service.storage.v1.volume.VolumeService/DelFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) MoveAndCopyFile(ctx context.Context, in *MoveCopyFileReq, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/api.service.storage.v1.volume.VolumeService/MoveAndCopyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) RenameFile(ctx context.Context, in *RenameFileReq, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/api.service.storage.v1.volume.VolumeService/RenameFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) FileDown(ctx context.Context, in *FileReq, opts ...grpc.CallOption) (*FileDownRes, error) {
	out := new(FileDownRes)
	err := c.cc.Invoke(ctx, "/api.service.storage.v1.volume.VolumeService/FileDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) FileData(ctx context.Context, in *FileReq, opts ...grpc.CallOption) (*FileDataRes, error) {
	out := new(FileDataRes)
	err := c.cc.Invoke(ctx, "/api.service.storage.v1.volume.VolumeService/FileData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeServiceServer is the server API for VolumeService service.
// All implementations must embed UnimplementedVolumeServiceServer
// for forward compatibility
type VolumeServiceServer interface {
	// 创建存储卷
	CreateVolume(context.Context, *CreateVolumeReq) (*Volume, error)
	// 删除存储卷
	DeleteVolume(context.Context, *DeleteVolumeReq) (*v1.Empty, error)
	// 存储卷列表
	ListVolume(context.Context, *ListVolumeReq) (*ListVolumeReply, error)
	// 文件列表
	ListFile(context.Context, *ListFileReq) (*ListFileReply, error)
	// 创建文件
	CreateFile(context.Context, *CreateFileReq) (*v1.Empty, error)
	// 文件删除
	DelFile(context.Context, *DelFileReq) (*v1.Empty, error)
	// 移动与复制文件
	MoveAndCopyFile(context.Context, *MoveCopyFileReq) (*v1.Empty, error)
	// 重命名文件
	RenameFile(context.Context, *RenameFileReq) (*v1.Empty, error)
	// 获取文件下载地址
	FileDown(context.Context, *FileReq) (*FileDownRes, error)
	// 获取文件下载地址
	FileData(context.Context, *FileReq) (*FileDataRes, error)
	mustEmbedUnimplementedVolumeServiceServer()
}

// UnimplementedVolumeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVolumeServiceServer struct {
}

func (UnimplementedVolumeServiceServer) CreateVolume(context.Context, *CreateVolumeReq) (*Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (UnimplementedVolumeServiceServer) DeleteVolume(context.Context, *DeleteVolumeReq) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolume not implemented")
}
func (UnimplementedVolumeServiceServer) ListVolume(context.Context, *ListVolumeReq) (*ListVolumeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVolume not implemented")
}
func (UnimplementedVolumeServiceServer) ListFile(context.Context, *ListFileReq) (*ListFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFile not implemented")
}
func (UnimplementedVolumeServiceServer) CreateFile(context.Context, *CreateFileReq) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedVolumeServiceServer) DelFile(context.Context, *DelFileReq) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFile not implemented")
}
func (UnimplementedVolumeServiceServer) MoveAndCopyFile(context.Context, *MoveCopyFileReq) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveAndCopyFile not implemented")
}
func (UnimplementedVolumeServiceServer) RenameFile(context.Context, *RenameFileReq) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFile not implemented")
}
func (UnimplementedVolumeServiceServer) FileDown(context.Context, *FileReq) (*FileDownRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDown not implemented")
}
func (UnimplementedVolumeServiceServer) FileData(context.Context, *FileReq) (*FileDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileData not implemented")
}
func (UnimplementedVolumeServiceServer) mustEmbedUnimplementedVolumeServiceServer() {}

// UnsafeVolumeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolumeServiceServer will
// result in compilation errors.
type UnsafeVolumeServiceServer interface {
	mustEmbedUnimplementedVolumeServiceServer()
}

func RegisterVolumeServiceServer(s grpc.ServiceRegistrar, srv VolumeServiceServer) {
	s.RegisterService(&VolumeService_ServiceDesc, srv)
}

func _VolumeService_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.storage.v1.volume.VolumeService/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).CreateVolume(ctx, req.(*CreateVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.storage.v1.volume.VolumeService/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).DeleteVolume(ctx, req.(*DeleteVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_ListVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).ListVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.storage.v1.volume.VolumeService/ListVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).ListVolume(ctx, req.(*ListVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_ListFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).ListFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.storage.v1.volume.VolumeService/ListFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).ListFile(ctx, req.(*ListFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.storage.v1.volume.VolumeService/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).CreateFile(ctx, req.(*CreateFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_DelFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).DelFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.storage.v1.volume.VolumeService/DelFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).DelFile(ctx, req.(*DelFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_MoveAndCopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveCopyFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).MoveAndCopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.storage.v1.volume.VolumeService/MoveAndCopyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).MoveAndCopyFile(ctx, req.(*MoveCopyFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.storage.v1.volume.VolumeService/RenameFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).RenameFile(ctx, req.(*RenameFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_FileDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).FileDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.storage.v1.volume.VolumeService/FileDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).FileDown(ctx, req.(*FileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_FileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).FileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.storage.v1.volume.VolumeService/FileData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).FileData(ctx, req.(*FileReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VolumeService_ServiceDesc is the grpc.ServiceDesc for VolumeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VolumeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.service.storage.v1.volume.VolumeService",
	HandlerType: (*VolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _VolumeService_CreateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _VolumeService_DeleteVolume_Handler,
		},
		{
			MethodName: "ListVolume",
			Handler:    _VolumeService_ListVolume_Handler,
		},
		{
			MethodName: "ListFile",
			Handler:    _VolumeService_ListFile_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _VolumeService_CreateFile_Handler,
		},
		{
			MethodName: "DelFile",
			Handler:    _VolumeService_DelFile_Handler,
		},
		{
			MethodName: "MoveAndCopyFile",
			Handler:    _VolumeService_MoveAndCopyFile_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _VolumeService_RenameFile_Handler,
		},
		{
			MethodName: "FileDown",
			Handler:    _VolumeService_FileDown_Handler,
		},
		{
			MethodName: "FileData",
			Handler:    _VolumeService_FileData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/storage/v1/volume.proto",
}
