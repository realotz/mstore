// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errors

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnknownError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_UNKNOWN_ERROR.String() && e.Code == 500
}

func ErrorUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthErrorReason_UNKNOWN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsBusinessError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_BUSINESS_ERROR.String() && e.Code == 400
}

func ErrorBusinessError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, AuthErrorReason_BUSINESS_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsNotLogin(err error) bool {
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_NOT_LOGIN.String() && e.Code == 401
}

func ErrorNotLogin(format string, args ...interface{}) *errors.Error {
	return errors.New(401, AuthErrorReason_NOT_LOGIN.String(), fmt.Sprintf(format, args...))
}

func IsNotAuthority(err error) bool {
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_NOT_AUTHORITY.String() && e.Code == 403
}

func ErrorNotAuthority(format string, args ...interface{}) *errors.Error {
	return errors.New(403, AuthErrorReason_NOT_AUTHORITY.String(), fmt.Sprintf(format, args...))
}

func IsConflictError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_CONFLICT_ERROR.String() && e.Code == 409
}

func ErrorConflictError(format string, args ...interface{}) *errors.Error {
	return errors.New(409, AuthErrorReason_CONFLICT_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsParamsError(err error) bool {
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_PARAMS_ERROR.String() && e.Code == 422
}

func ErrorParamsError(format string, args ...interface{}) *errors.Error {
	return errors.New(422, AuthErrorReason_PARAMS_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsPreconditionRequired(err error) bool {
	e := errors.FromError(err)
	return e.Reason == AuthErrorReason_PRECONDITION_REQUIRED.String() && e.Code == 428
}

func ErrorPreconditionRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(428, AuthErrorReason_PRECONDITION_REQUIRED.String(), fmt.Sprintf(format, args...))
}
